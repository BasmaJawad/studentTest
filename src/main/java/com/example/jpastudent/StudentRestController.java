package com.example.jpastudent;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

@RestController
public class StudentRestController {

    @Autowired
    StudentRepository studentRepository;

    @GetMapping("/students")
    public List<Student> students() {
        return studentRepository.findAll();
    }

    @GetMapping("/teststudent")
    public List<Student> teststudent() {
        Student std = new Student();
        std.setBornDate(LocalDate.now());
        List<Student> lst = studentRepository.findAll();
        std.setName("Autogenerated size=" + lst.size());
        studentRepository.save(std);
        System.out.println("saved");
        return studentRepository.findAll();
    }

    @GetMapping("/student/{name}")
    public Student getstudent(@PathVariable String name) {
        return new Student(name);
    }

    @GetMapping("/student2/{name}")
    public Student student(@PathVariable Optional<String> name) {
        if (name.isPresent())
            return new Student(name.get());
        return new Student(" ");
    }

    @GetMapping("/student3/{name}")
    public Student student(@PathVariable String name) {
        return studentRepository.findByName(name).orElse(new Student(name + "not found"));
    }

    @GetMapping("/student4/{name}")
    public Student getStudent4(@PathVariable String name) {
        return studentRepository.findByName(name).orElseThrow(() -> new RuntimeException("xxx"));
    }

    @GetMapping("/student5/{name}")
    public Student getStudent5(@PathVariable String name) {
        return studentRepository.findByName(name).orElseThrow(() -> new StudentNotFoundException(name));
    }

    @GetMapping("/student6/{name}")
    public ResponseEntity<Student> getStudent6(@PathVariable String name) {
        var stud = studentRepository.findByName(name);
        if (stud.isPresent()) {
            return new ResponseEntity<>(stud.get(), HttpStatus.OK);
        }
        return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);
    }

    @PostMapping("/std")
    @ResponseStatus(HttpStatus.CREATED)
    public Student postStudent(@RequestBody Student student){
        return studentRepository.save(student);
    }

    @DeleteMapping("/student/{id}")
    public ResponseEntity<Student> deleteStudent(@RequestParam Integer id) {
        studentRepository.deleteById(id);
        return  new ResponseEntity<>(HttpStatus.OK);

    }
}
